// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `t.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __t_h__
#define __t_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Pri
{

class Ac;
class AcPrx;

}

namespace Pri
{

class AcPrx : public virtual ::Ice::Proxy<AcPrx, ::Ice::ObjectPrx>
{
public:

    void get(const ::Ice::Context& __ctx = Ice::noExplicitContext)
    {
        
        makePromiseOutgoing(true, this, &Pri::AcPrx::__get, __ctx).get();
    }

    ::std::function<void ()>
    get_async(::std::function<void ()> __response,
              ::std::function<void (::std::exception_ptr)> __ex = nullptr,
              ::std::function<void (bool)> __sent = nullptr,
              const ::Ice::Context& __ctx = Ice::noExplicitContext)
    {
        return makeLambdaOutgoing(__response, __ex, __sent, this, &Pri::AcPrx::__get, __ctx);
    }

    template<template<typename> class P = ::std::promise>
    auto get_async(const ::Ice::Context& __ctx = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return makePromiseOutgoing<P>(false, this, &Pri::AcPrx::__get, __ctx);
    }

    void __get(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context& = Ice::noExplicitContext);

    static const ::std::string& ice_staticId();

protected: 

    AcPrx() = default;
    friend ::std::shared_ptr<AcPrx> IceInternal::createProxy<AcPrx>();
};

}

namespace Pri
{

class AcDisp : public virtual ::Ice::Object
{
public:

    typedef AcPrx ProxyType;

    virtual bool ice_isA(::std::string, const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    static const ::std::string& ice_staticId();

    virtual void get(const ::Ice::Current& = ::Ice::noExplicitCurrent) = 0;

    ::Ice::DispatchStatus ___get(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);
};

}

namespace Pri
{

class Ac : public ::Ice::ValueHelper<Ac, Ice::Value>
{
public:

    typedef ::std::shared_ptr<Ac> PointerType;

    Ac() = default;

    Ac(int __ice_a, const ::std::shared_ptr<::Pri::Ac>& __ice_ac) :
        a(__ice_a),
        ac(::std::move(__ice_ac))
    {
    }

    static const ::std::string& ice_staticId();

protected:

    virtual void __writeImpl(::Ice::OutputStream*) const;
    virtual void __readImpl(::Ice::InputStream*);

public:

    int a;

    ::std::shared_ptr<::Pri::Ac> ac;
};

static Ac _Ac_init;

}

namespace Pri
{

typedef ::std::shared_ptr<Ac> AcPtr;
class AcPrx;
typedef ::std::shared_ptr<AcPrx> AcPrxPtr;

}

#else // C++98 mapping

namespace IceProxy
{

namespace Pri
{

class Ac;
void __read(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::Pri::Ac>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Pri::Ac*);

}

}

namespace Pri
{

class Ac;
::Ice::Object* upCast(::Pri::Ac*);
typedef ::IceInternal::Handle< ::Pri::Ac> AcPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Pri::Ac> AcPrx;
typedef AcPrx AcPrxPtr;
void __patch(AcPtr&, const ::Ice::ObjectPtr&);

}

namespace Pri
{

class Callback_Ac_get_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Ac_get_Base> Callback_Ac_getPtr;

}

namespace IceProxy
{

namespace Pri
{

class Ac : public virtual ::IceProxy::Ice::Proxy< ::IceProxy::Pri::Ac, ::IceProxy::Ice::Object>
{
public:
    void get(const ::Ice::Context& __ctx = ::Ice::noExplicitContext);

    ::Ice::AsyncResultPtr begin_get(const ::Ice::Context& __ctx = ::Ice::noExplicitContext)
    {
        return __begin_get(__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_get(::Ice::noExplicitContext, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_get(__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Pri::Callback_Ac_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_get(::Ice::noExplicitContext, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_get(const ::Ice::Context& __ctx, const ::Pri::Callback_Ac_getPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_get(__ctx, __del, __cookie);
    }

    void end_get(const ::Ice::AsyncResultPtr&);
    
private:
    ::Ice::AsyncResultPtr __begin_get(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    static const ::std::string& ice_staticId();
};

}

}

namespace Pri
{

class Ac : public virtual ::Ice::Object, public ::IceInternal::GCObject
{
public:

    typedef AcPrx ProxyType;
    typedef AcPtr PointerType;

    Ac()
    {
    }

    Ac(::Ice::Int __ice_a, const ::Pri::AcPtr& __ice_ac) :
        a(__ice_a),
        ac(__ice_ac)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    static const ::std::string& ice_staticId();

    virtual void __gcVisitMembers(::IceInternal::GCVisitor&);

    virtual void get(const ::Ice::Current& = ::Ice::noExplicitCurrent) = 0;
    ::Ice::DispatchStatus ___get(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::Ice::OutputStream*) const;
    virtual void __readImpl(::Ice::InputStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;

public:

    ::Ice::Int a;

    ::Pri::AcPtr ac;
};

inline bool operator==(const Ac& l, const Ac& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Ac& l, const Ac& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Pri
{

template<class T>
class CallbackNC_Ac_get : public Callback_Ac_get_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Ac_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Ac_getPtr
newCallback_Ac_get(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ac_get<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ac_getPtr
newCallback_Ac_get(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ac_get<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Ac_getPtr
newCallback_Ac_get(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ac_get<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Ac_getPtr
newCallback_Ac_get(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Ac_get<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Ac_get : public Callback_Ac_get_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Ac_get(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Ac_getPtr
newCallback_Ac_get(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ac_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ac_getPtr
newCallback_Ac_get(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ac_get<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Ac_getPtr
newCallback_Ac_get(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ac_get<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Ac_getPtr
newCallback_Ac_get(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Ac_get<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
