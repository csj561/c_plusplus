// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `testice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __testice_h__
#define __testice_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace WG
{

class WGTestIce;
class WGTestIcePrx;

}

namespace WG
{

class WGTestIcePrx : public virtual ::Ice::Proxy<WGTestIcePrx, ::Ice::ObjectPrx>
{
public:

    int ping(const ::Ice::Context& __ctx = Ice::noExplicitContext)
    {
        return 
        makePromiseOutgoing<int>(true, this, &WG::WGTestIcePrx::__ping, __ctx).get();
    }

    ::std::function<void ()>
    ping_async(::std::function<void (int)> __response,
               ::std::function<void (::std::exception_ptr)> __ex = nullptr,
               ::std::function<void (bool)> __sent = nullptr,
               const ::Ice::Context& __ctx = Ice::noExplicitContext)
    {
        return makeLambdaOutgoing<int>(__response, __ex, __sent, this, &WG::WGTestIcePrx::__ping, __ctx);
    }

    template<template<typename> class P = ::std::promise>
    auto ping_async(const ::Ice::Context& __ctx = Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return makePromiseOutgoing<int, P>(false, this, &WG::WGTestIcePrx::__ping, __ctx);
    }

    void __ping(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::Ice::Context& = Ice::noExplicitContext);

    struct Result_GetTime
    {
        ::std::string strTime;
        int returnValue;
    };

    int GetTime(::std::string& __p_strTime, const ::Ice::Context& __ctx = Ice::noExplicitContext)
    {
        auto __result = 
        makePromiseOutgoing<Result_GetTime>(true, this, &WG::WGTestIcePrx::__GetTime, __ctx).get();
        __p_strTime = ::std::move(__result.strTime);
        return __result.returnValue;
    }

    ::std::function<void ()>
    GetTime_async(::std::function<void (int, ::std::string)> __response,
                  ::std::function<void (::std::exception_ptr)> __ex = nullptr,
                  ::std::function<void (bool)> __sent = nullptr,
                  const ::Ice::Context& __ctx = Ice::noExplicitContext)
    {
        auto __responseCb = [__response](Result_GetTime&& result)
        {
            __response(result.returnValue, ::std::move(result.strTime));
        };
        return makeLambdaOutgoing<Result_GetTime>(__responseCb, __ex, __sent, this, &WG::WGTestIcePrx::__GetTime, __ctx);
    }

    template<template<typename> class P = ::std::promise>
    auto GetTime_async(const ::Ice::Context& __ctx = Ice::noExplicitContext)
        -> decltype(::std::declval<P<Result_GetTime>>().get_future())
    {
        return makePromiseOutgoing<Result_GetTime, P>(false, this, &WG::WGTestIcePrx::__GetTime, __ctx);
    }

    void __GetTime(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Result_GetTime>>&, const ::Ice::Context& = Ice::noExplicitContext);

    static const ::std::string& ice_staticId();

protected: 

    WGTestIcePrx() = default;
    friend ::std::shared_ptr<WGTestIcePrx> IceInternal::createProxy<WGTestIcePrx>();
};

}

namespace WG
{

class WGTestIce : public virtual ::Ice::Object
{
public:

    typedef WGTestIcePrx ProxyType;

    virtual bool ice_isA(::std::string, const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    static const ::std::string& ice_staticId();

    virtual int ping(const ::Ice::Current& = ::Ice::noExplicitCurrent) = 0;

    ::Ice::DispatchStatus ___ping(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual int GetTime(::std::string&, const ::Ice::Current& = ::Ice::noExplicitCurrent) = 0;

    ::Ice::DispatchStatus ___GetTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);
};

}

namespace WG
{

typedef ::std::shared_ptr<WGTestIce> WGTestIcePtr;
class WGTestIcePrx;
typedef ::std::shared_ptr<WGTestIcePrx> WGTestIcePrxPtr;

}

#else // C++98 mapping

namespace IceProxy
{

namespace WG
{

class WGTestIce;
void __read(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::WG::WGTestIce>&);
::IceProxy::Ice::Object* upCast(::IceProxy::WG::WGTestIce*);

}

}

namespace WG
{

class WGTestIce;
::Ice::Object* upCast(::WG::WGTestIce*);
typedef ::IceInternal::Handle< ::WG::WGTestIce> WGTestIcePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::WG::WGTestIce> WGTestIcePrx;
typedef WGTestIcePrx WGTestIcePrxPtr;
void __patch(WGTestIcePtr&, const ::Ice::ObjectPtr&);

}

namespace WG
{

class Callback_WGTestIce_ping_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WGTestIce_ping_Base> Callback_WGTestIce_pingPtr;

class Callback_WGTestIce_GetTime_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WGTestIce_GetTime_Base> Callback_WGTestIce_GetTimePtr;

}

namespace IceProxy
{

namespace WG
{

class WGTestIce : public virtual ::IceProxy::Ice::Proxy< ::IceProxy::WG::WGTestIce, ::IceProxy::Ice::Object>
{
public:
    ::Ice::Int ping(const ::Ice::Context& __ctx = ::Ice::noExplicitContext);

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx = ::Ice::noExplicitContext)
    {
        return __begin_ping(__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_ping(::Ice::noExplicitContext, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_ping(__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::WG::Callback_WGTestIce_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_ping(::Ice::noExplicitContext, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ping(const ::Ice::Context& __ctx, const ::WG::Callback_WGTestIce_pingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_ping(__ctx, __del, __cookie);
    }

    ::Ice::Int end_ping(const ::Ice::AsyncResultPtr&);
    
private:
    ::Ice::AsyncResultPtr __begin_ping(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    ::Ice::Int GetTime(::std::string& __p_strTime, const ::Ice::Context& __ctx = ::Ice::noExplicitContext);

    ::Ice::AsyncResultPtr begin_GetTime(const ::Ice::Context& __ctx = ::Ice::noExplicitContext)
    {
        return __begin_GetTime(__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetTime(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_GetTime(::Ice::noExplicitContext, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTime(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_GetTime(__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTime(const ::WG::Callback_WGTestIce_GetTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_GetTime(::Ice::noExplicitContext, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetTime(const ::Ice::Context& __ctx, const ::WG::Callback_WGTestIce_GetTimePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_GetTime(__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetTime(::std::string& __p_strTime, const ::Ice::AsyncResultPtr&);
    
private:
    ::Ice::AsyncResultPtr __begin_GetTime(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    static const ::std::string& ice_staticId();
};

}

}

namespace WG
{

class WGTestIce : public virtual ::Ice::Object
{
public:

    typedef WGTestIcePrx ProxyType;
    typedef WGTestIcePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int ping(const ::Ice::Current& = ::Ice::noExplicitCurrent) = 0;
    ::Ice::DispatchStatus ___ping(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetTime(::std::string&, const ::Ice::Current& = ::Ice::noExplicitCurrent) = 0;
    ::Ice::DispatchStatus ___GetTime(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::Ice::OutputStream*) const;
    virtual void __readImpl(::Ice::InputStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const WGTestIce& l, const WGTestIce& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const WGTestIce& l, const WGTestIce& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace WG
{

template<class T>
class CallbackNC_WGTestIce_ping : public Callback_WGTestIce_ping_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_WGTestIce_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WG::WGTestIcePrx __proxy = ::WG::WGTestIcePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ping(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_WGTestIce_pingPtr
newCallback_WGTestIce_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WGTestIce_ping<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WGTestIce_pingPtr
newCallback_WGTestIce_ping(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WGTestIce_ping<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WGTestIce_ping : public Callback_WGTestIce_ping_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_WGTestIce_ping(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WG::WGTestIcePrx __proxy = ::WG::WGTestIcePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ping(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_WGTestIce_pingPtr
newCallback_WGTestIce_ping(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WGTestIce_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WGTestIce_pingPtr
newCallback_WGTestIce_ping(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WGTestIce_ping<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_WGTestIce_GetTime : public Callback_WGTestIce_GetTime_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&);

    CallbackNC_WGTestIce_GetTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WG::WGTestIcePrx __proxy = ::WG::WGTestIcePrx::uncheckedCast(__result->getProxy());
        ::std::string strTime;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetTime(strTime, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, strTime);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_WGTestIce_GetTimePtr
newCallback_WGTestIce_GetTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WGTestIce_GetTime<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WGTestIce_GetTimePtr
newCallback_WGTestIce_GetTime(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WGTestIce_GetTime<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WGTestIce_GetTime : public Callback_WGTestIce_GetTime_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&, const CT&);

    Callback_WGTestIce_GetTime(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WG::WGTestIcePrx __proxy = ::WG::WGTestIcePrx::uncheckedCast(__result->getProxy());
        ::std::string strTime;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetTime(strTime, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, strTime, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_WGTestIce_GetTimePtr
newCallback_WGTestIce_GetTime(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WGTestIce_GetTime<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WGTestIce_GetTimePtr
newCallback_WGTestIce_GetTime(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WGTestIce_GetTime<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
