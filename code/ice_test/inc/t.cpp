// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `t.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <t.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Pri::Err> __Pri__Err_init("::Pri::Err");

const ::std::string __Pri__xyd_ids[2] =
{
    "::Ice::Object",
    "::Pri::xyd"
};
const ::std::string __Pri__xyd_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "pri"
};
const ::std::string __Pri__xyd__pri_name = "pri";

const ::std::string __Pri__Xu_ids[2] =
{
    "::Ice::Object",
    "::Pri::Xu"
};
const ::std::string __Pri__Xu_ops[] =
{
    "add",
    "get",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string __Pri__Xu__add_name = "add";
const ::std::string __Pri__Xu__get_name = "get";

}

::std::string
Pri::Err::ice_id() const
{
    return __Pri__Err_init.typeId;
}

void
Pri::Err::ice_throw() const
{
    throw *this;
}

void
Pri::Err::__writeImpl(::Ice::OutputStream* __os) const
{
    __os->startSlice(__Pri__Err_init.typeId, -1, true);
    __os->write(maxi);
    __os->endSlice();
}

void
Pri::Err::__readImpl(::Ice::InputStream* __is)
{
    __is->startSlice();
    __is->read(maxi);
    __is->endSlice();
}

void
Pri::xydPrx::__pri(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Result_pri>>& __outAsync, const ::Ice::Context& __ctx)
{
    __checkAsyncTwowayOnly(__Pri__xyd__pri_name);
    __outAsync->invoke(__Pri__xyd__pri_name, ::Ice::OperationMode::Normal, ::Ice::DefaultFormat, __ctx, 
        nullptr,
        [](const ::Ice::UserException& __ex)
        {
            try
            {
                __ex.ice_throw();
            }
            catch(const ::Pri::Err&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        },
        [&](::Ice::InputStream* __is)
        {
            Result_pri v;
            __is->read(v.i);
            __is->read(v.returnValue);
            return v;
        });
}

const ::std::string&
Pri::xydPrx::ice_staticId()
{
    return Pri::xyd::ice_staticId();
}

void
Pri::XuPrx::__add(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& __outAsync, const ::std::shared_ptr<::Pri::xydPrx>& __p_x, const ::Ice::Context& __ctx)
{
    __outAsync->invoke(__Pri__Xu__add_name, ::Ice::OperationMode::Normal, ::Ice::DefaultFormat, __ctx, 
        [&](::Ice::OutputStream* __os)
        {
            __os->write(__p_x);
        },
        nullptr);
}

void
Pri::XuPrx::__get(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Pri::xydPrx>>>& __outAsync, const ::Ice::Context& __ctx)
{
    __checkAsyncTwowayOnly(__Pri__Xu__get_name);
    __outAsync->invoke(__Pri__Xu__get_name, ::Ice::OperationMode::Normal, ::Ice::DefaultFormat, __ctx, 
        nullptr,
        nullptr);
}

const ::std::string&
Pri::XuPrx::ice_staticId()
{
    return Pri::Xu::ice_staticId();
}

bool
Pri::xyd::ice_isA(::std::string _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Pri__xyd_ids, __Pri__xyd_ids + 2, _s);
}

::std::vector< ::std::string>
Pri::xyd::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Pri__xyd_ids[0], &__Pri__xyd_ids[2]);
}

const ::std::string&
Pri::xyd::ice_id(const ::Ice::Current&) const
{
    return __Pri__xyd_ids[1];
}

const ::std::string&
Pri::xyd::ice_staticId()
{
    return __Pri__xyd_ids[1];
}

::Ice::DispatchStatus
Pri::xyd::___pri(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::OperationMode::Normal, __current.mode);
    __inS.readEmptyParams();
    int __p_i;
    try
    {
        int __ret = pri(__p_i, __current);
        auto __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_i);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Pri::Err& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Pri::xyd::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& c)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Pri__xyd_ops, __Pri__xyd_ops + 5, c.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, c.id, c.facet, c.operation);
    }

    switch(r.first - __Pri__xyd_ops)
    {
        case 0:
        {
            return ___ice_id(in, c);
        }
        case 1:
        {
            return ___ice_ids(in, c);
        }
        case 2:
        {
            return ___ice_isA(in, c);
        }
        case 3:
        {
            return ___ice_ping(in, c);
        }
        case 4:
        {
            return ___pri(in, c);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, c.id, c.facet, c.operation);
}

bool
Pri::Xu::ice_isA(::std::string _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Pri__Xu_ids, __Pri__Xu_ids + 2, _s);
}

::std::vector< ::std::string>
Pri::Xu::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Pri__Xu_ids[0], &__Pri__Xu_ids[2]);
}

const ::std::string&
Pri::Xu::ice_id(const ::Ice::Current&) const
{
    return __Pri__Xu_ids[1];
}

const ::std::string&
Pri::Xu::ice_staticId()
{
    return __Pri__Xu_ids[1];
}

::Ice::DispatchStatus
Pri::Xu::___add(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::OperationMode::Normal, __current.mode);
    ::Ice::InputStream* __is = __inS.startReadParams();
    ::std::shared_ptr<::Pri::xydPrx> __p_x;
    __is->read(__p_x);
    __inS.endReadParams();
    add(::std::move(__p_x), __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Pri::Xu::___get(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::OperationMode::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::shared_ptr<::Pri::xydPrx> __ret = get(__current);
    auto __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Pri::Xu::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& c)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Pri__Xu_ops, __Pri__Xu_ops + 6, c.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, c.id, c.facet, c.operation);
    }

    switch(r.first - __Pri__Xu_ops)
    {
        case 0:
        {
            return ___add(in, c);
        }
        case 1:
        {
            return ___get(in, c);
        }
        case 2:
        {
            return ___ice_id(in, c);
        }
        case 3:
        {
            return ___ice_ids(in, c);
        }
        case 4:
        {
            return ___ice_isA(in, c);
        }
        case 5:
        {
            return ___ice_ping(in, c);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, c.id, c.facet, c.operation);
}

#else // C++98 mapping

namespace
{

const ::std::string __Pri__xyd__pri_name = "pri";

const ::std::string __Pri__Xu__add_name = "add";

const ::std::string __Pri__Xu__get_name = "get";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Pri::Err> __Pri__Err_init("::Pri::Err");

}

Pri::Err::Err(const ::Pri::seqOpt& __ice_maxi) :
    ::Ice::UserException(),
    maxi(__ice_maxi)
{
}

Pri::Err::~Err() throw()
{
}

::std::string
Pri::Err::ice_id() const
{
    return "::Pri::Err";
}

Pri::Err*
Pri::Err::ice_clone() const
{
    return new Err(*this);
}

void
Pri::Err::ice_throw() const
{
    throw *this;
}

void
Pri::Err::__writeImpl(::Ice::OutputStream* __os) const
{
    __os->startSlice("::Pri::Err", -1, true);
    __os->write(maxi);
    __os->endSlice();
}

void
Pri::Err::__readImpl(::Ice::InputStream* __is)
{
    __is->startSlice();
    __is->read(maxi);
    __is->endSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Pri::upCast(::IceProxy::Pri::xyd* p) { return p; }

void
::IceProxy::Pri::__read(::Ice::InputStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Pri::xyd>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Pri::xyd;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::Pri::xyd::pri(::Ice::Int& __p_i, const ::Ice::Context& __ctx)
{
    __checkTwowayOnly(__Pri__xyd__pri_name);
    ::IceInternal::Outgoing __og(this, __Pri__xyd__pri_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Pri::Err&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_id());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::Ice::InputStream* __is = __og.startReadParams();
    __is->read(__p_i);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Pri::xyd::__begin_pri(const ::Ice::Context& __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Pri__xyd__pri_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::CallbackOutgoing(this, __Pri__xyd__pri_name, __del, __cookie);
    try
    {
        __result->prepare(__Pri__xyd__pri_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke(__Pri__xyd__pri_name);
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::Pri::xyd::end_pri(::Ice::Int& __p_i, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Pri__xyd__pri_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Pri::Err&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_id());
        }
    }
    ::Ice::InputStream* __is = __result->__startReadParams();
    __is->read(__p_i);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Pri::xyd::ice_staticId()
{
    return ::Pri::xyd::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::Pri::upCast(::IceProxy::Pri::Xu* p) { return p; }

void
::IceProxy::Pri::__read(::Ice::InputStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Pri::Xu>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Pri::Xu;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Pri::Xu::add(const ::Pri::xydPrx& __p_x, const ::Ice::Context& __ctx)
{
    ::IceInternal::Outgoing __og(this, __Pri__Xu__add_name, ::Ice::Normal, __ctx);
    try
    {
        ::Ice::OutputStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_x);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Pri::Xu::__begin_add(const ::Pri::xydPrx& __p_x, const ::Ice::Context& __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::CallbackOutgoing(this, __Pri__Xu__add_name, __del, __cookie);
    try
    {
        __result->prepare(__Pri__Xu__add_name, ::Ice::Normal, __ctx);
        ::Ice::OutputStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_x);
        __result->endWriteParams();
        __result->invoke(__Pri__Xu__add_name);
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Pri::Xu::end_add(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Pri__Xu__add_name);
}

::Pri::xydPrx
IceProxy::Pri::Xu::get(const ::Ice::Context& __ctx)
{
    __checkTwowayOnly(__Pri__Xu__get_name);
    ::IceInternal::Outgoing __og(this, __Pri__Xu__get_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_id());
            throw __uue;
        }
    }
    ::Pri::xydPrx __ret;
    ::Ice::InputStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Pri::Xu::__begin_get(const ::Ice::Context& __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Pri__Xu__get_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::CallbackOutgoing(this, __Pri__Xu__get_name, __del, __cookie);
    try
    {
        __result->prepare(__Pri__Xu__get_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke(__Pri__Xu__get_name);
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

::Pri::xydPrx
IceProxy::Pri::Xu::end_get(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Pri__Xu__get_name);
    ::Pri::xydPrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_id());
        }
    }
    ::Ice::InputStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Pri::Xu::ice_staticId()
{
    return ::Pri::Xu::ice_staticId();
}

::Ice::Object* Pri::upCast(::Pri::xyd* p) { return p; }

namespace
{
const ::std::string __Pri__xyd_ids[2] =
{
    "::Ice::Object",
    "::Pri::xyd"
};

}

bool
Pri::xyd::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Pri__xyd_ids, __Pri__xyd_ids + 2, _s);
}

::std::vector< ::std::string>
Pri::xyd::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Pri__xyd_ids[0], &__Pri__xyd_ids[2]);
}

const ::std::string&
Pri::xyd::ice_id(const ::Ice::Current&) const
{
    return __Pri__xyd_ids[1];
}

const ::std::string&
Pri::xyd::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Pri::xyd";
    return typeId;
#else
    return __Pri__xyd_ids[1];
#endif
}

::Ice::DispatchStatus
Pri::xyd::___pri(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Ice::Int __p_i;
    try
    {
        ::Ice::Int __ret = pri(__p_i, __current);
        ::Ice::OutputStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_i);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Pri::Err& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __Pri__xyd_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "pri"
};

}

::Ice::DispatchStatus
Pri::xyd::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Pri__xyd_all, __Pri__xyd_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Pri__xyd_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___pri(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Pri::xyd::__writeImpl(::Ice::OutputStream* __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->endSlice();
}

void
Pri::xyd::__readImpl(::Ice::InputStream* __is)
{
    __is->startSlice();
    __is->endSlice();
}

void 
Pri::__patch(xydPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Pri::xydPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Pri::xyd::ice_staticId(), v);
    }
}

::Ice::Object* Pri::upCast(::Pri::Xu* p) { return p; }

namespace
{
const ::std::string __Pri__Xu_ids[2] =
{
    "::Ice::Object",
    "::Pri::Xu"
};

}

bool
Pri::Xu::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Pri__Xu_ids, __Pri__Xu_ids + 2, _s);
}

::std::vector< ::std::string>
Pri::Xu::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Pri__Xu_ids[0], &__Pri__Xu_ids[2]);
}

const ::std::string&
Pri::Xu::ice_id(const ::Ice::Current&) const
{
    return __Pri__Xu_ids[1];
}

const ::std::string&
Pri::Xu::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Pri::Xu";
    return typeId;
#else
    return __Pri__Xu_ids[1];
#endif
}

::Ice::DispatchStatus
Pri::Xu::___add(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::Ice::InputStream* __is = __inS.startReadParams();
    ::Pri::xydPrx __p_x;
    __is->read(__p_x);
    __inS.endReadParams();
    add(__p_x, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Pri::Xu::___get(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Pri::xydPrx __ret = get(__current);
    ::Ice::OutputStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Pri__Xu_all[] =
{
    "add",
    "get",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Pri::Xu::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Pri__Xu_all, __Pri__Xu_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Pri__Xu_all)
    {
        case 0:
        {
            return ___add(in, current);
        }
        case 1:
        {
            return ___get(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Pri::Xu::__writeImpl(::Ice::OutputStream* __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->endSlice();
}

void
Pri::Xu::__readImpl(::Ice::InputStream* __is)
{
    __is->startSlice();
    __is->endSlice();
}

void 
Pri::__patch(XuPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Pri::XuPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Pri::Xu::ice_staticId(), v);
    }
}

#endif
