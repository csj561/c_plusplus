// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `t.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <t.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultValueFactoryInit<::Pri::Ac> __Pri__Ac_init("::Pri::Ac");

const ::std::string __Pri__Ac_ids[2] =
{
    "::Ice::Object",
    "::Pri::Ac"
};
const ::std::string __Pri__Ac_ops[] =
{
    "get",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string __Pri__Ac__get_name = "get";

}

void
Pri::AcPrx::__get(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& __outAsync, const ::Ice::Context& __ctx)
{
    __outAsync->invoke(__Pri__Ac__get_name, ::Ice::OperationMode::Normal, ::Ice::DefaultFormat, __ctx, 
        nullptr,
        nullptr);
}

const ::std::string&
Pri::AcPrx::ice_staticId()
{
    return Pri::AcDisp::ice_staticId();
}

bool
Pri::AcDisp::ice_isA(::std::string _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Pri__Ac_ids, __Pri__Ac_ids + 2, _s);
}

::std::vector< ::std::string>
Pri::AcDisp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Pri__Ac_ids[0], &__Pri__Ac_ids[2]);
}

const ::std::string&
Pri::AcDisp::ice_id(const ::Ice::Current&) const
{
    return __Pri__Ac_ids[1];
}

const ::std::string&
Pri::AcDisp::ice_staticId()
{
    return __Pri__Ac_ids[1];
}

::Ice::DispatchStatus
Pri::AcDisp::___get(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::OperationMode::Normal, __current.mode);
    __inS.readEmptyParams();
    get(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Pri::AcDisp::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& c)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Pri__Ac_ops, __Pri__Ac_ops + 5, c.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, c.id, c.facet, c.operation);
    }

    switch(r.first - __Pri__Ac_ops)
    {
        case 0:
        {
            return ___get(in, c);
        }
        case 1:
        {
            return ___ice_id(in, c);
        }
        case 2:
        {
            return ___ice_ids(in, c);
        }
        case 3:
        {
            return ___ice_isA(in, c);
        }
        case 4:
        {
            return ___ice_ping(in, c);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, c.id, c.facet, c.operation);
}

void
Pri::Ac::__writeImpl(::Ice::OutputStream* __os) const
{
    __os->startSlice(__Pri__Ac_init.typeId, -1, true);
    __os->write(a);
    __os->write(ac);
    __os->endSlice();
}

void
Pri::Ac::__readImpl(::Ice::InputStream* __is)
{
    __is->startSlice();
    __is->read(a);
    __is->read(ac);
    __is->endSlice();
}

const ::std::string&
Pri::Ac::ice_staticId()
{
    return __Pri__Ac_init.typeId;
}

#else // C++98 mapping

namespace
{

const ::std::string __Pri__Ac__get_name = "get";

}
::IceProxy::Ice::Object* ::IceProxy::Pri::upCast(::IceProxy::Pri::Ac* p) { return p; }

void
::IceProxy::Pri::__read(::Ice::InputStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Pri::Ac>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Pri::Ac;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Pri::Ac::get(const ::Ice::Context& __ctx)
{
    ::IceInternal::Outgoing __og(this, __Pri__Ac__get_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Pri::Ac::__begin_get(const ::Ice::Context& __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::CallbackOutgoing(this, __Pri__Ac__get_name, __del, __cookie);
    try
    {
        __result->prepare(__Pri__Ac__get_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke(__Pri__Ac__get_name);
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Pri::Ac::end_get(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Pri__Ac__get_name);
}

const ::std::string&
IceProxy::Pri::Ac::ice_staticId()
{
    return ::Pri::Ac::ice_staticId();
}

::Ice::Object* Pri::upCast(::Pri::Ac* p) { return p; }

#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(push)
#   pragma warning(disable:4589)
#endif
::Ice::ObjectPtr
Pri::Ac::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
}
#if defined(_MSC_VER) && (_MSC_VER >= 1900)
#   pragma warning(pop)
#endif

namespace
{
const ::std::string __Pri__Ac_ids[2] =
{
    "::Ice::Object",
    "::Pri::Ac"
};

}

bool
Pri::Ac::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Pri__Ac_ids, __Pri__Ac_ids + 2, _s);
}

::std::vector< ::std::string>
Pri::Ac::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Pri__Ac_ids[0], &__Pri__Ac_ids[2]);
}

const ::std::string&
Pri::Ac::ice_id(const ::Ice::Current&) const
{
    return __Pri__Ac_ids[1];
}

const ::std::string&
Pri::Ac::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Pri::Ac";
    return typeId;
#else
    return __Pri__Ac_ids[1];
#endif
}

void
Pri::Ac::__gcVisitMembers(::IceInternal::GCVisitor& _v)
{
    if(ac)
    {
        if((::Pri::upCast(ac.get())->__gcVisit(_v)))
        {
            ac = 0;
        }
    }
}

::Ice::DispatchStatus
Pri::Ac::___get(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    get(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Pri__Ac_all[] =
{
    "get",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Pri::Ac::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Pri__Ac_all, __Pri__Ac_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Pri__Ac_all)
    {
        case 0:
        {
            return ___get(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Pri::Ac::__writeImpl(::Ice::OutputStream* __os) const
{
    __os->startSlice(ice_staticId(), -1, true);
    __os->write(a);
    __os->write(ac);
    __os->endSlice();
}

void
Pri::Ac::__readImpl(::Ice::InputStream* __is)
{
    __is->startSlice();
    __is->read(a);
    __is->read(ac);
    __is->endSlice();
}

void 
Pri::__patch(AcPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Pri::AcPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Pri::Ac::ice_staticId(), v);
    }
}

#endif
