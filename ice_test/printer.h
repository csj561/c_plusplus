// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `printer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __printer_h__
#define __printer_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Pri
{

class Printer;
class PrinterPrx;

}

namespace Pri
{

class PrinterPrx : public virtual ::Ice::Proxy<PrinterPrx, ::Ice::ObjectPrx>
{
public:

    ::std::string pStr(const ::std::string& __p_s, const ::Ice::Context& __ctx = Ice::noExplicitContext)
    {
        return 
        makePromiseOutgoing<::std::string>(true, this, &Pri::PrinterPrx::__pStr, __p_s, __ctx).get();
    }

    ::std::function<void ()>
    pStr_async(const ::std::string& __p_s, 
               ::std::function<void (::std::string)> __response,
               ::std::function<void (::std::exception_ptr)> __ex = nullptr,
               ::std::function<void (bool)> __sent = nullptr,
               const ::Ice::Context& __ctx = Ice::noExplicitContext)
    {
        return makeLambdaOutgoing<::std::string>(__response, __ex, __sent, this, &Pri::PrinterPrx::__pStr, __p_s, __ctx);
    }

    template<template<typename> class P = ::std::promise>
    auto pStr_async(const ::std::string& __p_s, const ::Ice::Context& __ctx = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return makePromiseOutgoing<::std::string, P>(false, this, &Pri::PrinterPrx::__pStr, __p_s, __ctx);
    }

    void __pStr(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::std::string&, const ::Ice::Context& = Ice::noExplicitContext);

    static const ::std::string& ice_staticId();

protected: 

    PrinterPrx() = default;
    friend ::std::shared_ptr<PrinterPrx> IceInternal::createProxy<PrinterPrx>();
};

}

namespace Pri
{

class Printer : public virtual ::Ice::Object
{
public:

    typedef PrinterPrx ProxyType;

    virtual bool ice_isA(::std::string, const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string pStr(::std::string, const ::Ice::Current& = ::Ice::noExplicitCurrent) = 0;

    ::Ice::DispatchStatus ___pStr(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);
};

}

namespace Pri
{

typedef ::std::shared_ptr<Printer> PrinterPtr;
class PrinterPrx;
typedef ::std::shared_ptr<PrinterPrx> PrinterPrxPtr;

}

#else // C++98 mapping

namespace IceProxy
{

namespace Pri
{

class Printer;
void __read(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::Pri::Printer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Pri::Printer*);

}

}

namespace Pri
{

class Printer;
::Ice::Object* upCast(::Pri::Printer*);
typedef ::IceInternal::Handle< ::Pri::Printer> PrinterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Pri::Printer> PrinterPrx;
typedef PrinterPrx PrinterPrxPtr;
void __patch(PrinterPtr&, const ::Ice::ObjectPtr&);

}

namespace Pri
{

class Callback_Printer_pStr_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Printer_pStr_Base> Callback_Printer_pStrPtr;

}

namespace IceProxy
{

namespace Pri
{

class Printer : public virtual ::IceProxy::Ice::Proxy< ::IceProxy::Pri::Printer, ::IceProxy::Ice::Object>
{
public:
    ::std::string pStr(const ::std::string& __p_s, const ::Ice::Context& __ctx = ::Ice::noExplicitContext);

    ::Ice::AsyncResultPtr begin_pStr(const ::std::string& __p_s, const ::Ice::Context& __ctx = ::Ice::noExplicitContext)
    {
        return __begin_pStr(__p_s, __ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_pStr(const ::std::string& __p_s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_pStr(__p_s, ::Ice::noExplicitContext, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pStr(const ::std::string& __p_s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_pStr(__p_s, __ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pStr(const ::std::string& __p_s, const ::Pri::Callback_Printer_pStrPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_pStr(__p_s, ::Ice::noExplicitContext, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_pStr(const ::std::string& __p_s, const ::Ice::Context& __ctx, const ::Pri::Callback_Printer_pStrPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return __begin_pStr(__p_s, __ctx, __del, __cookie);
    }

    ::std::string end_pStr(const ::Ice::AsyncResultPtr&);
    
private:
    ::Ice::AsyncResultPtr __begin_pStr(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    static const ::std::string& ice_staticId();
};

}

}

namespace Pri
{

class Printer : public virtual ::Ice::Object
{
public:

    typedef PrinterPrx ProxyType;
    typedef PrinterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::noExplicitCurrent) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string pStr(const ::std::string&, const ::Ice::Current& = ::Ice::noExplicitCurrent) = 0;
    ::Ice::DispatchStatus ___pStr(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::Ice::OutputStream*) const;
    virtual void __readImpl(::Ice::InputStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Printer& l, const Printer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Printer& l, const Printer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Pri
{

template<class T>
class CallbackNC_Printer_pStr : public Callback_Printer_pStr_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Printer_pStr(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Pri::PrinterPrx __proxy = ::Pri::PrinterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_pStr(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Printer_pStrPtr
newCallback_Printer_pStr(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_pStr<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Printer_pStrPtr
newCallback_Printer_pStr(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Printer_pStr<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Printer_pStr : public Callback_Printer_pStr_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Printer_pStr(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Pri::PrinterPrx __proxy = ::Pri::PrinterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_pStr(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Printer_pStrPtr
newCallback_Printer_pStr(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_pStr<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Printer_pStrPtr
newCallback_Printer_pStr(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Printer_pStr<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
